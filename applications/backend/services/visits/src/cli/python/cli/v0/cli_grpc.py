# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: cli/v0/cli.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import base.v0.endpoint_pb2
import base.v0.project_pb2
import base.v0.configuration_pb2
import services.agent.v0.agent_pb2
import services.runtime.v0.runtime_pb2
import observability.v0.inventory_pb2
import observability.v0.dependencies_pb2
import observability.v0.logs_pb2
import google.protobuf.empty_pb2
import google.api.annotations_pb2
import google.protobuf.timestamp_pb2
import cli.v0.cli_pb2


class CLIBase(abc.ABC):

    @abc.abstractmethod
    async def Ping(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetAgentInformation(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.GetAgentInformationRequest, services.agent.v0.agent_pb2.AgentInformation]') -> None:
        pass

    @abc.abstractmethod
    async def GetProjects(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, cli.v0.cli_pb2.GetProjectsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetProjectInventory(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.ProjectRequest, base.v0.project_pb2.Project]') -> None:
        pass

    @abc.abstractmethod
    async def GetProjectServiceDependencyGraph(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.ProjectRequest, observability.v0.dependencies_pb2.GraphResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetProjectPublicApplicationsDependencyGraph(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.ProjectRequest, cli.v0.cli_pb2.MultiGraphResponse]') -> None:
        pass

    @abc.abstractmethod
    async def LogHistory(self, stream: 'grpclib.server.Stream[observability.v0.logs_pb2.LogRequest, observability.v0.logs_pb2.LogResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetActive(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, cli.v0.cli_pb2.ActiveResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetAddresses(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.GetAddressRequest, cli.v0.cli_pb2.GetAddressResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetSharedConfiguration(self, stream: 'grpclib.server.Stream[cli.v0.cli_pb2.GetConfigurationRequest, cli.v0.cli_pb2.GetConfigurationResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Logs(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, observability.v0.logs_pb2.Log]') -> None:
        pass

    @abc.abstractmethod
    async def ActiveLogHistory(self, stream: 'grpclib.server.Stream[observability.v0.logs_pb2.LogRequest, observability.v0.logs_pb2.LogResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetFlowStatus(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, cli.v0.cli_pb2.FlowStatus]') -> None:
        pass

    @abc.abstractmethod
    async def StopFlow(self, stream: 'grpclib.server.Stream[google.protobuf.empty_pb2.Empty, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/observability.v0.CLI/Ping': grpclib.const.Handler(
                self.Ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                google.protobuf.empty_pb2.Empty,
            ),
            '/observability.v0.CLI/GetAgentInformation': grpclib.const.Handler(
                self.GetAgentInformation,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.GetAgentInformationRequest,
                services.agent.v0.agent_pb2.AgentInformation,
            ),
            '/observability.v0.CLI/GetProjects': grpclib.const.Handler(
                self.GetProjects,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                cli.v0.cli_pb2.GetProjectsResponse,
            ),
            '/observability.v0.CLI/GetProjectInventory': grpclib.const.Handler(
                self.GetProjectInventory,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.ProjectRequest,
                base.v0.project_pb2.Project,
            ),
            '/observability.v0.CLI/GetProjectServiceDependencyGraph': grpclib.const.Handler(
                self.GetProjectServiceDependencyGraph,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.ProjectRequest,
                observability.v0.dependencies_pb2.GraphResponse,
            ),
            '/observability.v0.CLI/GetProjectPublicApplicationsDependencyGraph': grpclib.const.Handler(
                self.GetProjectPublicApplicationsDependencyGraph,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.ProjectRequest,
                cli.v0.cli_pb2.MultiGraphResponse,
            ),
            '/observability.v0.CLI/LogHistory': grpclib.const.Handler(
                self.LogHistory,
                grpclib.const.Cardinality.UNARY_UNARY,
                observability.v0.logs_pb2.LogRequest,
                observability.v0.logs_pb2.LogResponse,
            ),
            '/observability.v0.CLI/GetActive': grpclib.const.Handler(
                self.GetActive,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                cli.v0.cli_pb2.ActiveResponse,
            ),
            '/observability.v0.CLI/GetAddresses': grpclib.const.Handler(
                self.GetAddresses,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.GetAddressRequest,
                cli.v0.cli_pb2.GetAddressResponse,
            ),
            '/observability.v0.CLI/GetSharedConfiguration': grpclib.const.Handler(
                self.GetSharedConfiguration,
                grpclib.const.Cardinality.UNARY_UNARY,
                cli.v0.cli_pb2.GetConfigurationRequest,
                cli.v0.cli_pb2.GetConfigurationResponse,
            ),
            '/observability.v0.CLI/Logs': grpclib.const.Handler(
                self.Logs,
                grpclib.const.Cardinality.UNARY_STREAM,
                google.protobuf.empty_pb2.Empty,
                observability.v0.logs_pb2.Log,
            ),
            '/observability.v0.CLI/ActiveLogHistory': grpclib.const.Handler(
                self.ActiveLogHistory,
                grpclib.const.Cardinality.UNARY_UNARY,
                observability.v0.logs_pb2.LogRequest,
                observability.v0.logs_pb2.LogResponse,
            ),
            '/observability.v0.CLI/GetFlowStatus': grpclib.const.Handler(
                self.GetFlowStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                cli.v0.cli_pb2.FlowStatus,
            ),
            '/observability.v0.CLI/StopFlow': grpclib.const.Handler(
                self.StopFlow,
                grpclib.const.Cardinality.UNARY_UNARY,
                google.protobuf.empty_pb2.Empty,
                google.protobuf.empty_pb2.Empty,
            ),
        }


class CLIStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Ping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/Ping',
            google.protobuf.empty_pb2.Empty,
            google.protobuf.empty_pb2.Empty,
        )
        self.GetAgentInformation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetAgentInformation',
            cli.v0.cli_pb2.GetAgentInformationRequest,
            services.agent.v0.agent_pb2.AgentInformation,
        )
        self.GetProjects = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetProjects',
            google.protobuf.empty_pb2.Empty,
            cli.v0.cli_pb2.GetProjectsResponse,
        )
        self.GetProjectInventory = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetProjectInventory',
            cli.v0.cli_pb2.ProjectRequest,
            base.v0.project_pb2.Project,
        )
        self.GetProjectServiceDependencyGraph = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetProjectServiceDependencyGraph',
            cli.v0.cli_pb2.ProjectRequest,
            observability.v0.dependencies_pb2.GraphResponse,
        )
        self.GetProjectPublicApplicationsDependencyGraph = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetProjectPublicApplicationsDependencyGraph',
            cli.v0.cli_pb2.ProjectRequest,
            cli.v0.cli_pb2.MultiGraphResponse,
        )
        self.LogHistory = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/LogHistory',
            observability.v0.logs_pb2.LogRequest,
            observability.v0.logs_pb2.LogResponse,
        )
        self.GetActive = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetActive',
            google.protobuf.empty_pb2.Empty,
            cli.v0.cli_pb2.ActiveResponse,
        )
        self.GetAddresses = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetAddresses',
            cli.v0.cli_pb2.GetAddressRequest,
            cli.v0.cli_pb2.GetAddressResponse,
        )
        self.GetSharedConfiguration = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetSharedConfiguration',
            cli.v0.cli_pb2.GetConfigurationRequest,
            cli.v0.cli_pb2.GetConfigurationResponse,
        )
        self.Logs = grpclib.client.UnaryStreamMethod(
            channel,
            '/observability.v0.CLI/Logs',
            google.protobuf.empty_pb2.Empty,
            observability.v0.logs_pb2.Log,
        )
        self.ActiveLogHistory = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/ActiveLogHistory',
            observability.v0.logs_pb2.LogRequest,
            observability.v0.logs_pb2.LogResponse,
        )
        self.GetFlowStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/GetFlowStatus',
            google.protobuf.empty_pb2.Empty,
            cli.v0.cli_pb2.FlowStatus,
        )
        self.StopFlow = grpclib.client.UnaryUnaryMethod(
            channel,
            '/observability.v0.CLI/StopFlow',
            google.protobuf.empty_pb2.Empty,
            google.protobuf.empty_pb2.Empty,
        )
